#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Apr 10 16:39:20 2018

@author: roy
"""
import numpy as np
from module import Dlearn_function
from module import Activation_function
import os


if os.path.dirname(__file__) == "":
    _work_path = "."
else:
    _work_path = os.path.dirname(__file__)

#初始化函数
Unit = [3,1]
F=[]
X = np.array([[47,35],
[22,41],
[73,87],
[12,46],
[12,9],
[80,90],
[82,71],
[40,34],
[60,65],
[62,78],
[87,41],
[85,47],
[30,80],
[54,100],
[92,55],
[7,34],
[68,19],
[89,21],
[11,28],
[60,88],
[61,68],
[4,80],
[58,4],
[28,48],
[90,11],
[79,70],
[88,17],
[93,17],
[82,61],
[60,21],
[18,67],
[77,58],
[27,82],
[89,80],
[17,59],
[28,9],
[97,52],
[86,34],
[39,98],
[91,47],
[66,62],
[28,64],
[58,11],
[68,6],
[83,75],
[86,29],
[100,74],
[82,12],
[20,55],
[11,80],
[41,100],
[86,17],
[2,49],
[46,15],
[86,95],
[49,48],
[48,54],
[60,46],
[48,84],
[63,58],
[1,70],
[19,34],
[29,45],
[83,53],
[39,2],
[71,38],
[71,86],
[35,85],
[77,26],
[26,1],
[91,78],
[45,68],
[22,68],
[66,53],
[51,62],
[59,56],
[13,70],
[12,2],
[10,61],
[78,43],
[60,96],
[4,67],
[95,2],
[33,28],
[83,37],
[24,49],
[56,53],
[73,42],
[17,61],
[21,54],
[66,7],
[84,40],
[75,68],
[86,56],
[33,59],
[14,53],
[44,7],
[8,58],
[13,51],
[99,63],
[71,64],
[47,12],
[16,37],
[48,31],
[71,33],
[60,36],
[84,87],
[73,39],
[52,14],
[61,11],
[74,94],
[42,25],
[13,36],
[49,83],
[48,14],
[5,6],
[39,16],
[32,35],
[89,76],
[13,94],
[8,81],
[35,19],
[64,70],
[67,78],
[84,41],
[71,25],
[21,26],
[34,97],
[85,4],
[59,72],
[25,53],
[65,51],
[63,16],
[15,89],
[76,93],
[99,71],
[21,15],
[17,57],
[25,80],
[70,26],
[9,81],
[67,43],
[40,42],
[24,83],
[31,34],
[92,43],
[15,92],
[75,45],
[93,22],
[26,69],
[29,26],
[46,24],
[19,76],
[6,41],
[75,57],
[26,32],
[6,7],
[62,10],
[90,74],
[38,23],
[2,23],
[24,48],
[25,61],
[32,56],
[55,40],
[81,61],
[15,55],
[61,4],
[93,86],
[67,43],
[85,95],
[72,4],
[43,42],
[84,87],
[91,99],
[11,28],
[4,49],
[61,41],
[13,58],
[30,25]])
Y = np.array([[1],
[1],
[1],
[1],
[1],
[1],
[1],
[0],
[1],
[0],
[0],
[1],
[1],
[1],
[0],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[0],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[0],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[0],
[0],
[1],
[0],
[0],
[1],
[1],
[0],
[1],
[1],
[1],
[1],
[1],
[1],
[0],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[0],
[1],
[0],
[1],
[1],
[1],
[0],
[1],
[1],
[0],
[1],
[1],
[1],
[0],
[1],
[1],
[1],
[0],
[1],
[1],
[0],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[0],
[1],
[1],
[0],
[1],
[1],
[0],
[0],
[1],
[0],
[0],
[1],
[0],
[1],
[1],
[1],
[0],
[1],
[1],
[1],
[0],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[0],
[1],
[1],
[1],
[1],
[1],
[1],
[0],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[1],
[0],
[1],
[1],
[1],
[1],
[0],
[1],
[1],
[1],
[0],
[1],
[0],
[0],
[1],
[1],
[1],
[0],
[1],
[0],
])
for n in range(0,len(Unit),1):
    F.append(Activation_function.sigmoid_or_gradient)
a = Dlearn_function.DeepLearn('test',_work_path)
# a.init_module(2,Unit,F)
# a.init_parameter()
# a.storge_module_to_pickle()
a.read_module_from_pickle()
print(a.cost_function(Y.T))
for i in range(1,1000,1):
    a.forward_propagation(X.T)
    a.back_propagation(Y.T)
    a.update_parameter()
a.storge_module_to_pickle()
print(a.W[2])
print(a.B[2])
# a.forward_propagation(np.array([[33],[23]]))
# print(a.A[2])

#a..Forward_propagation(X)










